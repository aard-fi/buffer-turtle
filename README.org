* buffer turtles                                                      :TOC_4:
  - [[#introduction][Introduction]]
    - [[#examples-for-auxiliary-bindings][Examples for auxiliary bindings]]
  - [[#read-buffer-contents][Read buffer contents]]
  - [[#clear-buffer][Clear buffer]]

** Introduction

Ever since I've played with ChatGPT for the first time I've been wondering how it'd behave if it had the ability to control simple [[https://en.wikipedia.org/wiki/Turtle_graphics][Turtle graphics]] in ASCII mode. While hooking various Emacs functionality up to [[https://github.com/karthink/gptel][gptel tools]] I realised that I now have an environment where it'd be able to draw just that.

This is a quick and dirty implementation of a turtle capable of going in four directions in any buffer - destroying the buffer contents as it goes. It can be run in two modes:

- Timer. It executes the current instruction roughly once per second. I initially had decent success in that mode - there's a [[https://www.youtube.com/watch?v=3HQMoVXbET4][youtube video of my second test run]]. In new, clean sessions using that mode was a bit trickier: It seems it only works well after a good initial explanation of the turtle mechanics in the current context.
- Manual. The turtle can be called for each supported direction, and will draw exactly one step. I've implemented that mode after GPT tried to use the tool like that.

#+CAPTION: A demo run of the turtle in manual mode
[[./demo.png]]

gptel bindings are provided for both modes - but you'd only want to have one set loaded to avoid confusion.

It also is useful to have bindings for clearing and reading the buffer available - in some cases giving explicit instructions to wait and check the buffer contents for expectet results improves things.

*** Examples for auxiliary bindings
** Read buffer contents

#+BEGIN_SRC lisp
  (defun gptel-tool--read-buffer-contents (buffer)
    "Return contents of BUFFER."
    (let ((buffer (get-buffer-create buffer)))
      (with-current-buffer buffer
        (concat (buffer-substring-no-properties (point-min) (point-max))))))

  (gptel-make-tool
   :function #'gptel-tool--read-buffer-contents
   :name  "gptel-tool--read-buffer-contents"
   :description "Read a buffers contents. If the buffer does not exist create it, and return an empty string. After calling this tool, stop. Then continue fulfilling user's request."
   :args (list '(:name "buffer"
                 :type string
                 :description "The buffer to retrieve contents from."))
   :category "emacs")
#+END_SRC

** Clear buffer

#+BEGIN_SRC lisp
  (defun gptel-tool--erase-buffer (buffer)
    "Erase contents of BUFFER."
    (let ((buffer (get-buffer-create buffer)))
      (with-current-buffer buffer
        (erase-buffer))))

  (gptel-make-tool
   :function #'gptel-tool--erase-buffer
   :name  "gptel-tool--erase-buffer"
   :description "Erase buffers contents. If the buffer does not exist create it, and return an empty string. After calling this tool, stop. Then continue fulfilling user's request."
   :args (list '(:name "buffer"
                 :type string
                 :description "The buffer to erase contents in."))
   :category "emacs")
#+END_SRC
